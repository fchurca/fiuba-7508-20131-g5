#! /bin/bash

#TODO: VER CÓMO SE PUEDE HACER CON FIFOs
function == {
if [ ${CONTROLX_TMPFILE}x == x ]; then
	CONTROLX_TMPFILE=`mktemp`
fi
echo $1 >> ${CONTROLX_TMPFILE}
}
function =! {
source ${CONTROLX_TMPFILE}
rm ${CONTROLX_TMPFILE}
CONTROLX_TMPFILE=
}

#! Desde acá loguear a stderr
if [ "$1"x == -dx ]; then
	grupo=`pwd` # debug
else
	grupo="${HOME}/7508-20131-g5" # real
fi
CONFDIR=${grupo}/conf
CONFFILE=${CONFDIR}/InstalX.conf
if [ ! -f ${CONFFILE} ]; then
	echo "Falta el archivo de configuración, no se puede continuar:" >&2
	echo ${CONFFILE} >&2
	exit 1;
fi

confdirs=('BINDIR' 'MAEDIR' 'ARRIDIR' 'ACEPDIR' 'RECHDIR' 'PROCDIR' 'REPODIR' 'LOGDIR')
confvars=${confdirs[@]}
confvars+=('LOGEXT' 'LOGSIZE' 'DATASIZE')
badvars=()
for var in ${confvars[@]}; do
	== `grep "^${var}=" ${CONFFILE} | cut -d= -f1,2`
	== "if [ \${${var}}x == x ]; then badvars+=('${var}'); fi"
done
=!

if [ ${badvars}x == x ]; then
	baddirs=()
	for dir in ${confdirs[@]}; do
		== "if [ ! -d \${${dir}} -o ! -r \${${dir}} ]; then baddirs+=('${dir}'); fi"
	done
	=!
	if [ ${baddirs}x != x ]; then
		echo "Los siguientes directorios no están accesibles, no se puede continuar:" >&2
		echo "${baddirs[@]}" >&2
		exit 1
	fi
else
	echo "Las siguientes variables no están definidas, no se puede continuar:" >&2
	echo "${badvars[@]}" >&2
	exit 1
fi

#### Inicialización de log
LOGFILE="${LOGDIR}/InstalX.${LOGEXT}"
if [ -f ${LOGFILE} -a ! -w ${LOGFILE} ]; then
	echo "No se puede escribir en el archivo de log, no se puede continuar:" >&2
	echo ${LOGFILE} >&2
	exit 1;
fi
if [ ! -f ${LOGFILE} ]; then
	echo "Falta el archivo de log, creando:" >&2
	echo ${LOGFILE} >&2
	touch ${LOGFILE}
	if [ ! -f ${LOGFILE} ]; then
		echo "No se puede crear el archivo de log, no se puede continuar" >&2
		exit 1;
	fi
	echo "Archivo de log creado exitosamente, redirigiendo salida" >&2
fi

#TODO: Si está, pasar stderr a log
# (función log que loguee $1 a logfile?)
echo 'Comando InicioX Inicio de Ejecución' >> ${LOGFILE}

#### Verificación de instalación
## Verificación de comandos
comandos=('InicioX' 'DetectaX')
comandosFaltantes=()
comandosNoEjecutables=()
comandosOk=()

for c in ${comandos[@]}; do
	f="${BINDIR}/$c"
	if [ ! -f $f ]; then
		comandosFaltantes+=($c)
	elif [ ! -x $f ]; then
		comandosNoEjecutables+=($c)
	else
		comandosOK+=($c)
	fi
done
## Reporte de situación
echo "Comandos registrados:" >&2
echo ${comandos[@]} >&2
if [ "${comandosNoEjecutables}x" != 'x' ]; then
	echo "Comandos no ejecutables:" >&2
	echo ${comandosNoEjecutables[@]} >&2
fi
# Comandos faltantes
if [ "${comandosFaltantes}x" != 'x' ]; then
	echo "Faltan los siguientes comandos, no se puede continuar:" >&2
	echo ${comandosFaltantes[@]} >&2
	exit 1
	# Arreglo de permisos
elif [ "${comandosNoEjecutables}x" != 'x' ]; then
	echo "Desea hacerlos ejecutables? (s/N)" >&2
	read ans
	if [ "${ans}x" == sx -o "${ans}x" == Sx ]; then
		echo Cambiando permisos... >&2
		bad=()
		for c in ${comandosNoEjecutables[@]}; do
			f="${BINDIR}/$c"
			if chmod gu+x $f 2>/dev/null; then
				echo OK: $c >&2
			else
				echo KO: $c >&2
				bad+=($c)
			fi
		done
		if [ "${bad}x" != "x" ]; then
			echo "No se pueden hacer ejecutables los siguientes comandos:" >&2
			echo ${bad[@]} >&2
			exit 3
		fi
	else
		exit 2
	fi
fi

####TODO: Verificar archivos maestros
# Existan legibles

####TODO: Verificar tablas de configuración
# Existan legibles

####TODO: Fallar si el entorno está inicializado
# lockfile? ${grupo}/lock
#  Si no existe, crearlo, borrarlo al final.
#  Si existe, fallar. Sugerir borrar a mano.

#### Exporto variables de entorno
#### TODO: Traer CANLOOP, TESPERA más lindo
echo "CANLOOP? (CHAR)"
read CANLOOP
echo "TESPERA? (INT)"
read TESPERA

confvars+=('CANLOOP' 'TESPERA' 'PATH')
for var in ${confvars[@]}; do
	== "export ${var}"
	== "echo ${var}=\${${var}}"
done
=!

#### Ejecución de DetectaX
echo "Desea efectuar la activación de DetectaX? (S/n)"
read ans
if [ "${ans}x" == sx -o "${ans}x" == Sx ]; then
	DetectaX
fi

