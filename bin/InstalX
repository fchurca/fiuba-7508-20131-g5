#! /bin/bash

### VARIABLES ###

INSTALXCONF=InstalX.conf
INSTALXLOG=InstalX.log
CURRENTDIR=$PWD
MAINDIR=${HOME}/7508-20131-g5
CONFDIR=$MAINDIR/conf
BINDIR=$MAINDIR/bin
MAEDIR=$MAINDIR/mae
ARRIDIR=$MAINDIR/arribos
ACEPDIR=$MAINDIR/aceptados
RECHDIR=$MAINDIR/rechazados
PROCDIR=$MAINDIR/procesados
REPODIR=$MAINDIR/reportes
LOGDIR=$MAINDIR/log
LOGEXT=.log
DATASIZE=100
LOGSIZE=400

PATH+=":${CURRENTDIR}"

#######################################################


### FUNCIONES ###

#Listar archivos dentro de un directorio
listFiles() {
	dir=$1
	if [ -n "$dir" -a -d "$dir" ]
	then
		ls "$dir"
	fi
}

LIB=LibX.sh
if [ ! -r ${LIB} ]; then
	echo "Biblioteca no encontrada, no se puede continuar: ${LIB}" >&2
	return 1;
fi
source ${LIB}

#Mostar los datos de la instalación previa
printPreviousInstalationData() {
	echo 'TP SO7508 Primer Cuatrimestre 2013. Tema X Copyright © Grupo 05'
	echo "Librería del sistema: $CONFDIR"
	listFiles "$CONFDIR"
	echo "Ejecutables: $BINDIR"
	listFiles "$BINDIR"
	echo "Archivos maestros: $MAEDIR"
	listFiles "$MAEDIR"
	echo "Directorio de arribo de archivos externos: $ARRIDIR"
	echo "Archivos externos aceptados: $ACEPDIR"
	echo "Archivos externos rechazados: $RECHDIR"
	echo "Archivos procesados: $PROCDIR"
	echo "Reportes de salida: $REPODIR"
	echo "Logs de auditoría del sistema: $LOGDIR/<comando>$LOGEXT"
	echo "Estado de la instalación: $1"
}

#Mostar los datos de la instalación
printInstalationData() {
	echo 'TP SO7508 Primer Cuatrimestre 2013. Tema X Copyright © Grupo 05'
	echo "Librería del sistema: $CONFDIR"
	echo "Ejecutables: $BINDIR"
	echo "Archivos maestros: $MAEDIR"
	echo "Directorio de arribo de archivos externos: $ARRIDIR"
	echo "Espacio mínimo libre para arribos: $DATASIZE Mb"
	echo "Archivos externos aceptados: $ACEPDIR"
	echo "Archivos externos rechazados: $RECHDIR"
	echo "Archivos procesados: $PROCDIR"
	echo "Reportes de salida: $REPODIR"
	echo "Logs de auditoría del sistema: $LOGDIR/<comando>$LOGEXT"
	echo "Tamaño máximo para los archivos de log del sistema: $LOGSIZE Kb"
	echo "Estado de la instalación: LISTA"
}

#Términos y condiciones
termsAndConditions() {
	echo 'TP SO7508 Primer Cuatrimestre 2013. Tema X Copyright © Grupo 05
A T E N C I O N: Al instalar TP SO7508 Primer Cuatrimestre 2013 UD. expresa aceptar los términos y condiciones del "ACUERDO DE LICENCIA DE SOFTWARE" incluido en este paquete.
¿Acepta? Si - No'
	getYesOrNoAnswer answer
}

#Verificar que Perl esté instalado
verifyPerlIsInstalled() {
	local installed=1
	local dontPrint=$(perl -v)
	local returnCode=$?
	if [ $returnCode -ne 0 ]
	then
		installed=0
	else
		version=$(perl -v | grep 'v[0-9]\+' | sed -r 's/.*v([0-9.]+).*/\1/')
		versionForComp=${version%%.*}
		if [ $versionForComp -lt 5 ]
		then
			installed=0
		fi
	fi
	if [ $installed -eq 0 ]
	then
		echo 'TP SO7508 Primer Cuatrimestre 2013. Tema X Copyright © Grupo 05
Para instalar el TP es necesario contar con Perl 5 o superior instalado. Efectúesu instalación e inténtelo nuevamente.
Proceso de instalación cancelado.'
		return 1
	else
		echo "TP SO7508 Primer Cuatrimestre 2013. Tema X Copyright © Grupo 05
Perl versión: $version"
		return 0
	fi
}

#Definir espacio mínimo de disco requerido
defineMinimumDiskSpace() {
	local end=false
	echo "Defina el espacio mínimo libre para el arribo de archivos externos en MBytes ($DATASIZE):"
	while ! $end
	do
		getIntAnswer DATASIZE
		local size=$(df -m ${HOME} | tail -1 | awk {'print $2'})
		if [ $DATASIZE -gt $size ]
		then
			echo "Insuficiente espacio en disco.
Espacio disponible: $size MB
Espacio requerido $DATASIZE MB
Cancele la instalación e intentelo más tarde o vuelva a intentarlo con otro valor."
		else
			end=true
		fi
	done
}

#Proceso para completar la configuración de la instalación
installationReconfiguration() {
	if [ -z "$BINDIR" ]
	then
		echo "Defina el directorio de instalación de los ejecutables ($MAINDIR/bin):"
		read BINDIR
		BINDIR=$MAINDIR/$BINDIR
	fi
	if [ -z "$MAEDIR" ]
	then
		echo "Defina el directorio de instalación de los archivos maestros ($MAINDIR/mae):"
		read MAEDIR
		MAEDIR=$MAINDIR/$MAEDIR
	fi
	if [ -z "$ARRIDIR" ]
	then
		echo "Defina el directorio de arribo de archivos externos ($MAINDIR/arribos):"
		read ARRIDIR
		ARRIDIR=$MAINDIR/$ARRIDIR
	fi
	if [ -z "$DATASIZE" ]
	then
		DATASIZE=100
		defineMinimumDiskSpace
	fi
	if [ -z "$RECHDIR" ]
	then
		echo "Defina el directorio de grabación de los archivos externos rechazados ($MAINDIR/rechazados):"
		read RECHDIR
		RECHDIR=$MAINDIR/$RECHDIR
	fi
	if [ -z "$ACEPDIR" ]
	then
		echo "Defina el directorio de grabación de los archivos externos aceptados ($MAINDIR/aceptados):"
		read ACEPDIR
		ACEPDIR=$MAINDIR/$ACEPDIR
	fi
	if [ -z "$PROCDIR" ]
	then
		echo "Defina el directorio de grabación de los archivos procesados ($MAINDIR/procesados):"
		read PROCDIR
		PROCDIR=$MAINDIR/$PROCDIR
	fi
	if [ -z "$REPODIR" ]
	then
		echo "Defina el directorio de grabación de los reportes de salida ($MAINDIR/reportes):"
		read REPODIR
		REPODIR=$MAINDIR/$REPODIR
	fi
	if [ -z "$LOGDIR" ]
	then
		echo "Defina el directorio de logs ($MAINDIR/log):"
		read LOGDIR
		LOGDIR=$MAINDIR/$LOGDIR
	fi
	if [ -z "$LOGEXT" ]
	then
		echo "Defina la extensión para los archivos de log (.log):"
		read LOGEXT
	fi
	if [ -z "$LOGSIZE" ]
	then
		echo "Defina el tamaño máximo para los archivos $LOGEXT en Kbytes (400):"
		read LOGSIZE
	fi
}

#Proceso completo de configuración de la instalación
installationConfiguration() {
	echo "Defina el directorio de instalación de los ejecutables ($BINDIR):"
	read BINDIR
	BINDIR=$MAINDIR/$BINDIR
	echo "Defina el directorio de instalación de los archivos maestros ($MAEDIR):"
	read MAEDIR
	MAEDIR=$MAINDIR/$MAEDIR
	echo "Defina el directorio de arribo de archivos externos ($ARRIDIR):"
	read ARRIDIR
	ARRIDIR=$MAINDIR/$ARRIDIR
	defineMinimumDiskSpace
	echo "Defina el directorio de grabación de los archivos externos rechazados ($RECHDIR):"
	read RECHDIR
	RECHDIR=$MAINDIR/$RECHDIR
	echo "Defina el directorio de grabación de los archivos externos aceptados ($ACEPDIR):"
	read ACEPDIR
	ACEPDIR=$MAINDIR/$ACEPDIR
	echo "Defina el directorio de grabación de los archivos procesados ($PROCDIR):"
	read PROCDIR
	PROCDIR=$MAINDIR/$PROCDIR
	echo "Defina el directorio de grabación de los reportes de salida ($REPODIR):"
	read REPODIR
	REPODIR=$MAINDIR/$REPODIR
	echo "Defina el directorio de logs ($LOGDIR):"
	read LOGDIR
	LOGDIR=$MAINDIR/$LOGDIR
	echo "Defina la extensión para los archivos de log ($LOGEXT):"
	read LOGEXT
	echo "Defina el tamaño máximo para los archivos $LOGEXT en Kbytes ($LOGSIZE):"
	getIntAnswer LOGSIZE
}

#Reemplazar si existe el dato de configuración sino grabarlo
findReplaceAndWrite() {
	lineToWrite="$1=$2=$3="`date -u`
	exists=1
	if [ -f "$CONFDIR/$INSTALXCONF" ]
	then
		grep -q "$1" "$CONFDIR/$INSTALXCONF"
		exists=$?
	fi
	if [ $exists -eq 0 ]
	then
		sed -i "s-$1.*-$lineToWrite-" "$CONFDIR/$INSTALXCONF"
	else
		echo "$lineToWrite" >> "$CONFDIR/$INSTALXCONF"
	fi
}

#Escribir los datos de la configuración del sistema
writeSystemConfiguration() { ###CAMBIAR LOGIN DEL USUARIO
	login=$(whoami)
	findReplaceAndWrite "GRUPO" "$MAINDIR" "$login"
	findReplaceAndWrite "CONFDIR" "$CONFDIR" "$login"
	findReplaceAndWrite "BINDIR" "$BINDIR" "$login"
	findReplaceAndWrite "MAEDIR" "$MAEDIR" "$login"
	findReplaceAndWrite "ARRIDIR" "$ARRIDIR" "$login"
	findReplaceAndWrite "ACEPDIR" "$ACEPDIR" "$login"
	findReplaceAndWrite "RECHDIR" "$RECHDIR" "$login"
	findReplaceAndWrite "PROCDIR" "$PROCDIR" "$login"
	findReplaceAndWrite "REPODIR" "$REPODIR" "$login"
	findReplaceAndWrite "LOGDIR" "$LOGDIR" "$login"
	findReplaceAndWrite "LOGEXT" "$LOGEXT" "$login"
	findReplaceAndWrite "LOGSIZE" "$LOGSIZE" "$login"
	findReplaceAndWrite "DATASIZE" "$DATASIZE" "$login"
}

#Proceso de instalación
installationProcess() {
	echo 'Creando estructuras de directorio. . . .'
	mkdir -p "$CONFDIR"
	mkdir -p "$BINDIR"
	mkdir -p "$MAEDIR"
	mkdir -p "$ARRIDIR"
	mkdir -p "$RECHDIR"
	mkdir -p "$ACEPDIR"
	mkdir -p "$PROCDIR"
	mkdir -p "$LOGDIR"
	mkdir -p "$REPODIR"
	echo 'Instalando archivos maestros'
	MoverX PPI.mae "$CURRENTDIR" "$MAEDIR"
	MoverX p-s.mae "$CURRENTDIR" "$MAEDIR"
	echo 'Instalando tablas de configuración'
	MoverX T2.tab "$CURRENTDIR" "$CONFDIR"
	MoverX T1.tab "$CURRENTDIR" "$CONFDIR"
	echo 'Instalando programas y funciones'
	MoverX InicioX "$CURRENTDIR" "$BINDIR"
	MoverX DetectaX "$CURRENTDIR" "$BINDIR"
	MoverX InterpreteX "$CURRENTDIR" "$BINDIR"
	MoverX StartX "$CURRENTDIR" "$BINDIR"
	MoverX StopX "$CURRENTDIR" "$BINDIR"
	MoverX ReporteX "$CURRENTDIR" "$BINDIR"
	MoverX VlogX "$CURRENTDIR" "$BINDIR"
	MoverX GlogX "$CURRENTDIR" "$BINDIR"
	MoverX LibX.sh "$CURRENTDIR" "$MAINDIR"
	MoverX MoverX "$CURRENTDIR" "$BINDIR"
	echo 'Actualizando la configuración del sistema'
	writeSystemConfiguration
	echo 'Instalación concluida'
}


#######################################################


### BLOQUE PRINCIPAL ###

echo 'Inicio de ejecución'
#GRABAR EN InstalX.log
echo "Log del comando InstalX: $CONFDIR/$INSTALXLOG"
#GRABAR EN InstalX.log
echo "Directorio de configuración: $CONFDIR"
#GRABAR EN InstalX.log

#Detectar si ya fue instalado.
if [ -f "$CONFDIR/$INSTALXCONF" ]
then
	BINDIR=
	MAEDIR=
	ARRIDIR=
	ACEPDIR=
	RECHDIR=
	PROCDIR=
	REPODIR=
	LOGDIR=
	LOGEXT=
	DATASIZE=
	LOGSIZE=
	confdirs=('BINDIR' 'MAEDIR' 'ARRIDIR' 'ACEPDIR' 'RECHDIR' 'PROCDIR' 'REPODIR' 'LOGDIR')
	confvars=(${confdirs[@]} 'LOGEXT' 'LOGSIZE' 'DATASIZE')
	badvars=()
	for var in ${confvars[@]}
	do
		eval `grep "^${var}=" "$CONFDIR/$INSTALXCONF" | cut -d= -f1,2`
		eval "if [ \${${var}}x == x ]; then badvars+=('${var}'); fi"
	done
	if [ ${badvars}x == x ]
	then
		printPreviousInstalationData COMPLETA
		echo "Proceso de instalación cancelado."
	else
		printPreviousInstalationData INCOMPLETA
		echo "¿Desea completar la instalación? Si - No"
		getYesOrNoAnswer answer
		if [ "$answer" = "si" ]
		then
			verifyPerlIsInstalled
			perlIsInstalled=$?
			if [ $perlIsInstalled -eq 0 ]
			then
				installationReconfiguration
				clear
				printInstalationData
				echo 'Iniciando Instalación. ¿Está Ud. seguro? Si - No'
				getYesOrNoAnswer answer
				if [ "$answer" = "si" ]
				then
					installationProcess
				fi
			fi
		fi
	fi
else
	termsAndConditions
	if [ "$answer" = "si" ]
	then
		verifyPerlIsInstalled
		perlIsInstalled=$?
		if [ $perlIsInstalled -eq 0 ]
		then
			configured=0
			while [ $configured -eq 0 ]
			do
				installationConfiguration
				clear
				printInstalationData
				echo '¿Desea continuar con la instalación? Si - No'
				getYesOrNoAnswer answer
				if [ "$answer" = "si" ]
				then
					configured=1
				elif [ "$answer" = "no" ]
				then
					clear
				fi
			done
			echo 'Iniciando Instalación. ¿Está Ud. seguro? Si - No'
			getYesOrNoAnswer answer
			if [ "$answer" = "si" ]
			then
				installationProcess
			fi
		fi
	fi
fi
