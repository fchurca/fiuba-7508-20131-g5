#!/bin/bash

BINDIR=`pwd`

# Funcion que determina los separadores para un pais dado
function determinarSeparadores
{
	#determinarSeparadores $pais $codigo 
	local path='T1.tab'
	sepCampo=`grep "^${pais}-${codigo}-[^-]*-[^-]*$" "${CONFDIR}/${path}"|sed "s/\(.*\)-\([^-]*\)-\([^-]*\)/\2/"`
	sepDec=`grep "^${pais}-${codigo}-[^-]*-[^-]*$" "${CONFDIR}/${path}"|sed "s/\(.*\)-\([^-]*\)-\([^-]*\)/\3/"`
}

# Funcion que obtiene los campos de cada registro
function obtenerCampos
{
	local path='T2.tab'
	local CamposInfo=()
	#Obtengo cada uno de los campos correspondientes al pais y codigo y los ordeno por orden de aparicion
	CamposInfo+=`grep "^${pais}-${codigo}-[^-]*-[^-]*-[^-]*$" "${CONFDIR}/${path}"|sed "s/\(.*\)-\([^-]*\)-\([^-]*\)-\([^-]*\)/\2-\3-\4/"`
	camposInfoOrdenados=`for c in ${CamposInfo[@]}; do echo "$c"; done | sort -t\- -n -k 2,2` 
}

#Funcion que cambia el formato de la linea al definitivo
function interpretarCampo
{
	#interpretarCampo $campoInfo $campo
	formatoCampo=`echo "$1"|cut -d "-" -f3`
	nombreCampo=`echo "$1"|cut -d "-" -f1`
	contenido=""
	if echo "$formatoCampo"|grep -q "^commax"; then
		local maxLongInt=`echo $formatoCampo|sed "s/\(^commax\)\([^\.]*\)\.\(.*\)/\2/"`
		local maxLongDec=`echo $formatoCampo|sed "s/\(^commax\)\([^\.]*\)\.\(.*\)/\3/"`
		local decimal=`echo "$2"|cut -d"${sepDec}" -f2`
		local entero=`echo "$2"|cut -d"${sepDec}" -f1`
		if [ ${#decimal} -le $maxLongDec -a ${#entero} -le $maxLongInt ];then
			if [ "$decimal" == "" -o "$2" == "$entero" ];then
				contenido="$entero"
			else	
				contenido="$entero,$decimal"
			fi
		else
			echo "logueo Error"
			registroValido="FALSE"			
			#TODO:logueo error
		fi
	elif echo "$formatoCampo"|grep -q "^ddmmyy"; then
		local long1=`echo $formatoCampo|sed "s/\(ddmmyy\)\(.*\)\./\2/"`
		local fecha1
		if [ $long1 -eq 8 ]; then
			fecha1=`echo $2|sed "s~\(..\)\(..\)\(....\)~\1/\2/\3~"`
		elif [ $long1 -eq 10 ]; then
			fecha1=`echo $2|sed "s~\(..\).\(..\).\(....\)~\1/\2/\3~"`
		else
			echo "logueo Error"
			registroValido="FALSE"
			#TODO:logueo error
		fi
		contenido=$fecha1
	elif echo "$formatoCampo" | grep -q "^yyddmm"; then
		local long2=`echo $formatoCampo|sed "s/\(yyddmm\)\(.*\)\./\2/"`
		local fecha2
		if [ $long2 -eq 8 ]; then
			fecha2=`echo $2|sed "s-\(....\)\(..\)\(..\)-\2/\3/\1-"`
		elif [ $long2 -eq 10 ]; then
			fecha2=`echo $2|sed "s-\(....\).\(..\).\(..\)-\2/\3/\1-"`
		else
			echo "logueo Error"
			registroValido="FALSE"
			#TODO:logueo error
		fi
		contenido=$fecha2
	elif echo "$formatoCampo"|grep -q '$'; then
		local maxLong=`echo $formatoCampo|sed "s/\(^.\)\(.*\)/\2/"`
		if [ ${#2} -le $maxLong ];then 
			local texto=$2
			contenido=$texto
		else
			echo "logueo Error"
			registroValido="FALSE"
			#TODO:logueo error
		fi
	else 
		echo "logueo este Error"
		registroValido="FALSE"
		#TODO:logueo error	
	fi
}

#Agrego a la linea formateada el nuevo campo procesado y actualizo mt_Rest
function anidarCampo
{
	#lineaFormateada+="$contenido;"
	arrayCampos[$nombreCampo]="$contenido"
	if [ $nombreCampo == "MT_IMPAGO" -o $nombreCampo == "MT_PRES" -o $nombreCampo == "Mt_INDE" -o $nombreCampo == "MT_INNODE" ];then
		local contenidoConPunto		
		if [ "${arrayCampos[$nombreCampo]}" == "" ] ;then
			contenidoConPunto="0"
			arrayCampos[$nombreCampo]="0"
		else
			contenidoConPunto=`echo $contenido|sed "s/,/\./"`	
		fi
		mt_Rest=`echo "scale=2; $contenidoConPunto + $mt_Rest" | bc`
	elif [ $nombreCampo == "MT_DEB" ];then
		local contenidoConPunto		
		if [ "${arrayCampos[$nombreCampo]}" == "" ] ;then
			contenidoConPunto="0"
			arrayCampos[$nombreCampo]="0"
		else
			contenidoConPunto=`echo $contenido|sed "s/,/\./"`	
		fi	
		mt_Rest=`echo "scale=2; $mt_Rest - $contenidoConPunto" | bc`
	fi
}

#Escribo la linea formateada en el archivo del pais
function escribirLinea
{
	if [ -e "$procdir/PRESTAMOS.$pais" ];then
		echo $lineaFormateada | cat >> "$procdir/PRESTAMOS.$pais"
	else
		touch "$procdir/PRESTAMOS.$pais"
		echo $lineaFormateada | cat >> "$procdir/PRESTAMOS.$pais"
	fi
}

#Genero la linea con todos los campos almacenados en el array de Campos
function generarLinea
{
		lineaFormateada=""
		lineaFormateada+="$codigo;"
		local ctb_anio=`echo ${arrayCampos[CTB_FE]}|sed "s-\(..\)/\(..\)/\(....\)-\3-"`
		local ctb_mes=`echo ${arrayCampos[CTB_FE]}|sed "s-\(..\)/\(..\)/\(....\)-\2-"`
		local ctb_dia=`echo ${arrayCampos[CTB_FE]}|sed "s-\(..\)/\(..\)/\(....\)-\1-"`
		lineaFormateada+="$ctb_anio;"
		lineaFormateada+="$ctb_mes;"
		lineaFormateada+="$ctb_dia;"
		lineaFormateada+="${arrayCampos[CTB_ESTADO]};"
		lineaFormateada+="${arrayCampos[PRES_ID]};"
		lineaFormateada+="${arrayCampos[MT_PRES]};"
		lineaFormateada+="${arrayCampos[MT_IMPAGO]};"
		lineaFormateada+="${arrayCampos[MT_INDE]};"
		lineaFormateada+="${arrayCampos[MT_INNODE]};"
		lineaFormateada+="${arrayCampos[MT_DEB]};"
		lineaFormateada+="$mt_Rest;"
		lineaFormateada+="${arrayCampos[PRES_CLI_ID]};"
		lineaFormateada+="${arrayCampos[PRES_CLI]};"
		lineaFormateada+=`date +"%d/%m/%Y"`
		lineaFormateada+=";$LOGNAME"
}

#cargo valores por defecto por si falta algun campo en el archivo de entrada
function inicializarArray
{
	arrayCampos[MT_PRES]="0"
	arrayCampos[MT_IMPAGO]="0"
	arrayCampos[MT_INDE]="0"
	arrayCampos[MT_INNODE]="0"
	arrayCampos[MT_DEB]="0"
}

#Main


#Iniciando el log
echo iniciando log

if [ "$(ls -A $ACEPDIR)" ]; then
#Proceso cada uno de los archivos del directorio
for arch in $ACEPDIR/*
	do
		#le saco hasta la ultima /
		aceptado=${arch##*/}
		existente="False"
		for proc in $PROCDIR/*
			do
				procesado=${proc##*/}
				if [ "$procesado" == "$aceptado" ];then
					{
					existente="True"
					break
					}
				fi
			done
		if [ $existente == "True" ];then
#Muevo archivo rechazado
			echo "Archivo $aceptado ya procesado.Mover a rechdir"
			mv $arch $RECHDIR
			echo "grabar log"
		else 
#Procesamiento de un archivo aceptado
			echo "Archivo nuevo procesado $i"
			name=`echo "$arch"|cut -d "/" -f3`
			pais=`echo "$name"|cut -d"-" -f1`
			codigo=`echo "$name"|cut -d"-" -f2`
			echo "pais:$pais codigo:$codigo"
			determinarSeparadores 
			echo "separador:$sepCampo Sepdec:$sepDec"
			obtenerCampos
			registrosInput="0"
			registrosOutput="0"
			while read linea
			do
			#leyendo registro
			#deberia coincidir la cantidad de campos del archivo con los de camposOrdenados
				indice=1
				mt_Rest=0
				registroValido="TRUE"
				registrosInput=$((registrosInput+1))
				declare -A arrayCampos
				inicializarArray
				for campoInfo in ${camposInfoOrdenados[@]}; do
					campo=`echo "$linea"|cut -d$sepCampo -f$indice`
					interpretarCampo $campoInfo $campo	
					if [ "$registroValido" == "FALSE" ];then
						break
					fi 				
					anidarCampo
					indice=$((indice+1))
				done	
				generarLinea
				echo "lineaFormateada=$lineaFormateada"
				if [ $(echo "$mt_Rest > 0" | bc -l) -eq "1" -a "$registroValido" == "TRUE" ];then
					escribirLinea
					echo "mt_rest=$mt_Rest"
					registrosOutput=$((registrosOutput+1))
				else
					echo "no quedan deudas. mt_rest=$mt_Rest"
					#TODO:logueo que no quedan deudas
				fi
			done < $arch
			echo "registrosInput=$registrosInput registrosOutput=$registrosOutput"
			echo ""			
			mv $arch $PROCDIR
		fi


	done
else
	echo "directorio $acepdir vacio"
	#TODO:logueo que no hay mas nada que procesar
fi

#echo fin de archivo
#echo cerrar log
